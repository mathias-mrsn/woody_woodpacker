#ifndef EXPLOIT_H
#define EXPLOIT_H

#include <stdlib.h>
#include <elf.h>
#include "stored_file.h"
#include "asm.h"

//! // TODO possibly deletable
#include <string.h>
#include <stdarg.h>
#include <unistd.h>

#define E_H (1 << 0)
#define P_H (1 << 1)
#define S_H (1 << 2)

enum
{
    x32 = 1,
    x64
};

typedef struct sELF64_FORMAT
{
    /**
     * elf header
     */
    Elf64_Ehdr *e_h;
    /**
     * program header / segment header
     */
    Elf64_Phdr *p_h;
    /**
     * section header
     */
    Elf64_Shdr *s_h;

} ELF64_FORMAT;

typedef struct sELF32_FORMAT
{
    /**
     * elf header
     */
    Elf32_Ehdr *e_h;
    /**
     * program header / segment header
     */
    Elf32_Phdr *p_h;
    /**
     * section header
     */
    Elf32_Shdr *s_h;

} ELF32_FORMAT;

typedef struct sELF_FORMAT
{
    /**
     * elf header
     */
    void *e_h;
    /**
     * program header / segment header
     */
    void *p_h;
    /**
     * section header
     */
    void *s_h;

} ELF_FORMAT;

typedef struct sEXPLOIT_INFO
{
    void *payload_entry;
    void *payload;
    size_t payload_size;
    size_t page_size;
    // exploited segment index
    size_t e_p_idx;
    // exploited section index
    size_t e_s_idx;
    // text section index
    int text_s_idx;
    // pointer containing the encrypt key
    void *key_ptr;

    size_t key_size;

} EXPLOIT_INFO;

#include "convert_headers.h"
void elf_exploit(const STORED_FILE *sf, int bin_arch);

/**
 * @brief
 */
int get_text_section(const STORED_FILE *sf, const ELF64_FORMAT *elf);
int find_text_segment(const ELF64_FORMAT *elf, int32_t idx);
int find_section_endof_segment(const ELF64_FORMAT *elf, int32_t idx);

#endif